<?php

namespace AppBundle\Entity;

use DateTime;
use Doctrine\ORM\Mapping as ORM;

/**
 * Item
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="AppBundle\Repository\ItemRepository")
 * @ORM\HasLifecycleCallbacks 
 */
class Item {

    const TYPE_DEMAND = 1;
    const TYPE_OFFER = 2;
    const TYPE_AUCTION = 3;
    const TYPE_DEMAND_STR = 'demand';
    const TYPE_OFFER_STR = 'offer';
    const TYPE_AUCTION_STR = 'auction';

    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="note", type="string", length=1000, nullable=true)
     */
    private $note;

    /**
     * @var integer
     *
     * @ORM\Column(name="type", type="smallint")
     */
    private $type;
    
    /**
     * @var integer
     *
     * @ORM\Column(name="price", type="decimal")
     */
    private $price;

    /**
     * @var boolean
     *
     * @ORM\Column(name="deleted", type="boolean")
     */
    private $deleted;

    /**
     * @var boolean
     *
     * @ORM\Column(name="completed", type="boolean")
     */
    private $completed = false;

    /**
     * @var boolean
     *
     * @ORM\Column(name="public", type="boolean")
     */
    private $public;

    /**
     * @var DateTime
     *
     * @ORM\Column(name="dateCreated", type="datetime")
     */
    private $dateCreated;    
    
    /**
     * @var DateTime
     *
     * @ORM\Column(name="validUntil", type="datetime", nullable=true)
     */
    private $validUntil;

    /**
     * @var integer
     * 
     * @ORM\ManyToOne(targetEntity="User", inversedBy="items")
     * @ORM\JoinColumn(name="owner", referencedColumnName="id", nullable=false)
     */
    private $owner;

    /**
     * @var integer
     * 
     * @ORM\ManyToOne(targetEntity="Category", inversedBy="items")
     * @ORM\JoinColumn(name="category", referencedColumnName="id", nullable=false)
     */
    private $category;

    /**
     * @var integer
     * 
     * @ORM\OneToMany(targetEntity="Item", mappedBy="responceTo")
     */
    private $responces;

    /**
     * @var integer
     *
     * @ORM\ManyToOne(targetEntity="Item", inversedBy="responces")
     * @ORM\JoinColumn(name="responceTo", referencedColumnName="id", nullable=true)
     */
    private $responceTo;

    /**
     *  @ORM\PrePersist 
     */
    public function doStuffOnPrePersist() {
        $this->dateCreated = new DateTime();
    }

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return Item
     */
    public function setName($name) {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName() {
        return $this->name;
    }

    /**
     * Set type
     *
     * @param integer $type
     * @return Item
     */
    public function setType($type) {
        $this->type = $type;

        return $this;
    }

    /**
     * Get type
     *
     * @return integer 
     */
    public function getType() {
        return $this->type;
    }

    /**
     * Set deleted
     *
     * @param boolean $deleted
     * @return Item
     */
    public function setDeleted($deleted) {
        $this->deleted = $deleted;

        return $this;
    }

    /**
     * Get deleted
     *
     * @return boolean 
     */
    public function getDeleted() {
        return $this->deleted;
    }

    /**
     * Set public
     *
     * @param boolean $public
     * @return Item
     */
    public function setPublic($public) {
        $this->public = $public;

        return $this;
    }

    /**
     * Get public
     *
     * @return boolean 
     */
    public function getPublic() {
        return $this->public;
    }

    /**
     * Get dateCreated
     *
     * @return DateTime 
     */
    public function getDateCreated() {
        return $this->dateCreated;
    }

    /**
     * Set owner
     *
     * @param integer $owner
     * @return Item
     */
    public function setOwner($owner) {
        $this->owner = $owner;

        return $this;
    }

    /**
     * Get owner
     *
     * @return integer 
     */
    public function getOwner() {
        return $this->owner;
    }

    /**
     * Set note
     *
     * @param string $note
     * @return Item
     */
    public function setNote($note) {
        $this->note = $note;

        return $this;
    }

    /**
     * Get note
     *
     * @return string 
     */
    public function getNote() {
        return $this->note;
    }

    /**
     * Set dateCreated
     *
     * @param \DateTime $dateCreated
     * @return Item
     */
    public function setDateCreated($dateCreated) {
        $this->dateCreated = $dateCreated;

        return $this;
    }

    /**
     * Set category
     *
     * @param \AppBundle\Entity\Category $category
     * @return Item
     */
    public function setCategory(\AppBundle\Entity\Category $category) {
        $this->category = $category;

        return $this;
    }

    /**
     * Get category
     *
     * @return \AppBundle\Entity\Category 
     */
    public function getCategory() {
        return $this->category;
    }

    /**
     * Constructor
     */
    public function __construct() {
        $this->responceTo = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Set responces
     *
     * @param \AppBundle\Entity\Item $responces
     * @return Item
     */
    public function setResponces(\AppBundle\Entity\Item $responces = null) {
        $this->responces = $responces;

        return $this;
    }

    /**
     * Get responces
     *
     * @return \AppBundle\Entity\Item 
     */
    public function getResponces() {
        return $this->responces;
    }

    /**
     * Add responceTo
     *
     * @param \AppBundle\Entity\Item $responceTo
     * @return Item
     */
    public function addResponceTo(\AppBundle\Entity\Item $responceTo) {
        $this->responceTo[] = $responceTo;

        return $this;
    }

    /**
     * Remove responceTo
     *
     * @param \AppBundle\Entity\Item $responceTo
     */
    public function removeResponceTo(\AppBundle\Entity\Item $responceTo) {
        $this->responceTo->removeElement($responceTo);
    }

    /**
     * Get responceTo
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getResponceTo() {
        return $this->responceTo;
    }

    public static function isValidType($type) {
        if ($type == self::TYPE_AUCTION || $type == self::TYPE_DEMAND || $type == self::TYPE_OFFER) {
            return true;
        }
        return false;
    }

    public static function typeToInt($type) {
        dump($type);
        dump(self::TYPE_DEMAND_STR);
        switch ($type) {
            case self::TYPE_DEMAND_STR: return self::TYPE_DEMAND;
            case self::TYPE_OFFER_STR: return self::TYPE_OFFER;
            case self::TYPE_AUCTION_STR: return self::TYPE_AUCTION;
        }
        throw new \Symfony\Component\OptionsResolver\Exception\InvalidArgumentException();
    }

    public static function intToType($int) {
        switch ($int) {
            case self::TYPE_DEMAND: return self::TYPE_DEMAND_STR;
            case self::TYPE_OFFER: return self::TYPE_OFFER_STR;
            case self::TYPE_AUCTION: return self::TYPE_AUCTION_STR;
        }
        throw new \Symfony\Component\OptionsResolver\Exception\InvalidArgumentException();
    }

    public function getTypeToString() {
        return self::intToType($this->type);
    }

    public function getOppositeTypeToString() {
        if ($this->type === self::TYPE_DEMAND) {
            return self::TYPE_OFFER_STR;
        } else {
            return self::TYPE_DEMAND_STR;
        }
    }

    /**
     * Set completed
     *
     * @param boolean $completed
     * @return Item
     */
    public function setCompleted($completed) {
        $this->completed = $completed;

        return $this;
    }

    /**
     * Get completed
     *
     * @return boolean 
     */
    public function getCompleted() {
        return $this->completed;
    }


    /**
     * Add responces
     *
     * @param \AppBundle\Entity\Item $responces
     * @return Item
     */
    public function addResponce(\AppBundle\Entity\Item $responces)
    {
        $this->responces[] = $responces;

        return $this;
    }

    /**
     * Remove responces
     *
     * @param \AppBundle\Entity\Item $responces
     */
    public function removeResponce(\AppBundle\Entity\Item $responces)
    {
        $this->responces->removeElement($responces);
    }

    /**
     * Set responceTo
     *
     * @param \AppBundle\Entity\Item $responceTo
     * @return Item
     */
    public function setResponceTo(\AppBundle\Entity\Item $responceTo = null)
    {
        $this->responceTo = $responceTo;

        return $this;
    }

    /**
     * Set validUntil
     *
     * @param \DateTime $validUntil
     * @return Item
     */
    public function setValidUntil($validUntil)
    {
        $this->validUntil = $validUntil;

        return $this;
    }

    /**
     * Get validUntil
     *
     * @return \DateTime 
     */
    public function getValidUntil()
    {
        return $this->validUntil;
    }
}
